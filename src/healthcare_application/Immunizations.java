
package healthcare_application;

import General_Functionality.LoggerUtility;
import General_Functionality.User_Modes;
import static com.mysql.cj.util.StringUtils.isNullOrEmpty;
import com.toedter.calendar.JDateChooser;
import healthcare_application.DBUtils.GMH_DBOperations;
import java.awt.Color;
import javax.swing.JOptionPane;
import java.sql.*;
import javax.swing.table.DefaultTableModel;
import java.util.ArrayList;
import java.util.List;
import healthcare_application.DBUtils.Immunizations_DBOperations;
import healthcare_application.DBUtils.Patient_Demographics_DBOperations;
import static healthcare_application.Patient_Selection.getPatientID;

public class Immunizations extends javax.swing.JFrame {

    private int patientID;
    private int RecordID;
    private String PName;
    
    public Immunizations() {
        initComponents();
        this.setTitle("Immunizations");
        User_Modes.View_Only_Mode(this);
        User_Modes.View_Only_Message(this);
    }
    
    public Immunizations(int patientID, String PName) {
        setPatientID(patientID);
        setPName(PName);
        initComponents();
        this.setTitle("Immunizations");
        initializeTable();
        User_Modes.View_Only_Mode(this);
        User_Modes.View_Only_Message(this);
//        ViewMode();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txt_delivery = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        txt_Comments = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txt_HCPId = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabl_Immunizations = new javax.swing.JTable();
        date_Immu_Date = new com.toedter.calendar.JDateChooser();
        date_expiration = new com.toedter.calendar.JDateChooser();
        jLabel10 = new javax.swing.JLabel();
        txt_Vaccine = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        menu_Patient_Selection = new javax.swing.JMenu();
        radio_Patient_Selection = new javax.swing.JRadioButtonMenuItem();
        patientDemoNavBtn = new javax.swing.JRadioButtonMenuItem();
        immunizationsNavBtn = new javax.swing.JMenuItem();
        GMHNavBtn = new javax.swing.JRadioButtonMenuItem();
        familyHistoryNavBTN = new javax.swing.JMenuItem();
        activityToleranceNavBtn = new javax.swing.JRadioButtonMenuItem();
        SoBNavBtn = new javax.swing.JRadioButtonMenuItem();
        menu_Edit = new javax.swing.JMenu();
        menu_Add = new javax.swing.JRadioButtonMenuItem();
        radio_buttion_edit = new javax.swing.JRadioButtonMenuItem();
        jRadioButton_Save = new javax.swing.JRadioButtonMenuItem();
        menu_delete = new javax.swing.JRadioButtonMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setSize(new java.awt.Dimension(840, 748));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setText("Immunizations");

        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("*Immunization Date: ");

        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("*Experation Date: ");

        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Delivery: ");

        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel8.setText("Comments: ");

        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("HCP ID: ");

        tabl_Immunizations.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Immunization ID", "Vaccine"
            }
        ));
        jScrollPane1.setViewportView(tabl_Immunizations);
        if (tabl_Immunizations.getColumnModel().getColumnCount() > 0) {
            tabl_Immunizations.getColumnModel().getColumn(1).setHeaderValue("Vaccine");
        }

        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("*Vaccine");

        jMenuBar1.setPreferredSize(new java.awt.Dimension(70, 40));

        menu_Patient_Selection.setText("Switch Pages");

        radio_Patient_Selection.setSelected(true);
        radio_Patient_Selection.setText("Patient Selection");
        radio_Patient_Selection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_Patient_SelectionActionPerformed(evt);
            }
        });
        menu_Patient_Selection.add(radio_Patient_Selection);

        patientDemoNavBtn.setSelected(true);
        patientDemoNavBtn.setText("Patient Demographics");
        patientDemoNavBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                patientDemoNavBtnActionPerformed(evt);
            }
        });
        menu_Patient_Selection.add(patientDemoNavBtn);

        immunizationsNavBtn.setText("Immunizations");
        immunizationsNavBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                immunizationsNavBtnActionPerformed(evt);
            }
        });
        menu_Patient_Selection.add(immunizationsNavBtn);

        GMHNavBtn.setSelected(true);
        GMHNavBtn.setText("General Medical History");
        GMHNavBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GMHNavBtnActionPerformed(evt);
            }
        });
        menu_Patient_Selection.add(GMHNavBtn);

        familyHistoryNavBTN.setText("Family History");
        familyHistoryNavBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                familyHistoryNavBTNActionPerformed(evt);
            }
        });
        menu_Patient_Selection.add(familyHistoryNavBTN);

        activityToleranceNavBtn.setSelected(true);
        activityToleranceNavBtn.setText("Activity Tolerance Interview");
        activityToleranceNavBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                activityToleranceNavBtnActionPerformed(evt);
            }
        });
        menu_Patient_Selection.add(activityToleranceNavBtn);

        SoBNavBtn.setSelected(true);
        SoBNavBtn.setText("Shortness of Breath Interview");
        SoBNavBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SoBNavBtnActionPerformed(evt);
            }
        });
        menu_Patient_Selection.add(SoBNavBtn);

        jMenuBar1.add(menu_Patient_Selection);

        menu_Edit.setText("Actions");

        menu_Add.setSelected(true);
        menu_Add.setText("Add Record");
        menu_Add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_AddActionPerformed(evt);
            }
        });
        menu_Edit.add(menu_Add);

        radio_buttion_edit.setSelected(true);
        radio_buttion_edit.setText("Edit Record");
        radio_buttion_edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_buttion_editActionPerformed(evt);
            }
        });
        menu_Edit.add(radio_buttion_edit);

        jRadioButton_Save.setSelected(true);
        jRadioButton_Save.setText("Save Record");
        jRadioButton_Save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButton_SaveActionPerformed(evt);
            }
        });
        menu_Edit.add(jRadioButton_Save);

        menu_delete.setSelected(true);
        menu_delete.setText("Delete Record");
        menu_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menu_deleteActionPerformed(evt);
            }
        });
        menu_Edit.add(menu_delete);

        jMenuBar1.add(menu_Edit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(date_Immu_Date, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txt_delivery, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txt_Comments, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(date_expiration, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_Vaccine, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txt_HCPId, javax.swing.GroupLayout.PREFERRED_SIZE, 251, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(317, 317, 317)
                        .addComponent(jLabel1)))
                .addContainerGap(60, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10)
                            .addComponent(txt_Vaccine, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(date_Immu_Date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(date_expiration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txt_delivery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txt_Comments, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(33, 33, 33)
                                .addComponent(jLabel9))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(txt_HCPId, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(85, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void menu_AddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_AddActionPerformed
        LoggerUtility.logUserAction("add", PName);
        User_Modes.Edit_Mode(this);
        ClearMode();
    }//GEN-LAST:event_menu_AddActionPerformed

    private void radio_buttion_editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_buttion_editActionPerformed
        LoggerUtility.logUserAction("edit", PName);
        User_Modes.Edit_Mode(this);
    }//GEN-LAST:event_radio_buttion_editActionPerformed

    private void jRadioButton_SaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton_SaveActionPerformed
        //Check Required Fields 
        String checkVaccine =  txt_Vaccine.getText();
        if(checkVaccine.isEmpty()){
            JOptionPane.showMessageDialog(this, "Vaccine field is required.", "Validation Error", JOptionPane.ERROR_MESSAGE);
        }
        if (date_Immu_Date.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Immunization date is required.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (date_expiration.getDate() == null) {
            JOptionPane.showMessageDialog(this, "Expiration date is required.", "Validation Error", JOptionPane.ERROR_MESSAGE);
            return;
        }   
        
        LoggerUtility.logUserAction("save", PName);
        
        if (getRecordID() == 0) {
            Immunizations_DBOperations.addImmunizationHistory(this, getPatientID());
        } else {
            Immunizations_DBOperations.editImmunizationHistory(this, getPatientID(), getRecordID());
        }
        
        initializeTable();
        User_Modes.View_Only_Mode(this);
        setRecordID(0);
        ClearMode();
        
    }//GEN-LAST:event_jRadioButton_SaveActionPerformed

    private void menu_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menu_deleteActionPerformed
        LoggerUtility.logUserAction("delete", PName);
        Immunizations_DBOperations.deleteImmunizationHistory(getRecordID(), getPatientID());
        User_Modes.View_Only_Mode(this);
        ClearMode();
    }//GEN-LAST:event_menu_deleteActionPerformed

    private void radio_Patient_SelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_Patient_SelectionActionPerformed
        Patient_Selection select = new Patient_Selection ();
        LoggerUtility.logFormChange(select, PName);
        select.setVisible(true);
        select.setPatientID(getPatientID());
        select.setPName(getPName());
        this.dispose();
    }//GEN-LAST:event_radio_Patient_SelectionActionPerformed

    private void patientDemoNavBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_patientDemoNavBtnActionPerformed
        Patient_Demographics_DBOperations operations = new Patient_Demographics_DBOperations();
        Patient_Demographics patient = operations.getPatientDemographics(getPatientID());
        LoggerUtility.logFormChange(patient, PName);
            if (patient != null) {
                patient.setVisible(true);
                patient.setPatientIDPD(getPatientID());
                patient.setPName(getPName());
            } else {
                JOptionPane.showMessageDialog(this, "No patient data found!", "Error", JOptionPane.ERROR_MESSAGE);
            }
            this.dispose();
    }//GEN-LAST:event_patientDemoNavBtnActionPerformed

    private void GMHNavBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GMHNavBtnActionPerformed
        GMH_DBOperations gmho = new GMH_DBOperations();
        General_Medical_History history = gmho.getGeneralMedicalHistory(getPatientID());
        LoggerUtility.logFormChange(history, PName);
        history.setPName(getPName());
        history.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_GMHNavBtnActionPerformed

    private void activityToleranceNavBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_activityToleranceNavBtnActionPerformed
        Activity_Tolerance_Interview ATA = new  Activity_Tolerance_Interview(getPatientID(), getPName());
        LoggerUtility.logFormChange(ATA, PName);
        ATA.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_activityToleranceNavBtnActionPerformed

    private void SoBNavBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SoBNavBtnActionPerformed
        // Create an instance of Shortness_of_Breath_Interview and pass the patientID
        Shortness_of_Breath_Interview sobaInterviewForm = new Shortness_of_Breath_Interview(getPatientID(), getPName());
        LoggerUtility.logFormChange(sobaInterviewForm, PName);
        // Set the form to be visible
        sobaInterviewForm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_SoBNavBtnActionPerformed

    private void immunizationsNavBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_immunizationsNavBtnActionPerformed
        // TODO add your handling code here:
        Immunizations newI = new Immunizations(getPatientID(), getPName());
        LoggerUtility.logFormChange(newI, PName);
        newI.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_immunizationsNavBtnActionPerformed

    private void familyHistoryNavBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_familyHistoryNavBTNActionPerformed
        // TODO add your handling code here:
        Family_History newFH = new Family_History(getPatientID(), getPName());
        LoggerUtility.logFormChange(newFH, PName);
        newFH.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_familyHistoryNavBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Immunizations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Immunizations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Immunizations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Immunizations.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Immunizations().setVisible(true);
            }
        });
    }
    
    public int getPatientID() {
        return this.patientID;
    }
    
    public void setPatientID(int patientID) {
        this.patientID = patientID;
    }
    
    public String getPName(){
        return PName;
    }
    
    public void setPName(String PName){
        this.PName = PName;
    }
    
    public int getRecordID() {
        return this.RecordID;
    }
    
    public void setRecordID(int recordID) {
        this.RecordID = recordID;
    }
    
    // Getter for datechooser_DOB
    public com.toedter.calendar.JDateChooser getImmu_Date() {
        return this.date_Immu_Date;
    }
    
    // Setter for datechooser_DOB with null check
    public void setImmu_Date(com.toedter.calendar.JDateChooser date_Immu_Date) {
        this.date_Immu_Date = (date_Immu_Date != null) ? date_Immu_Date : null;
    }
    
    // Getter for datechooser_DOB
    public com.toedter.calendar.JDateChooser getImmu_Exp_Date() {
        return this.date_expiration;
    }
    
    // Setter for datechooser_DOB with null check
    public void setExpImmu_Date(com.toedter.calendar.JDateChooser date_Immu_Date) {
        this.date_expiration = (date_expiration != null) ? date_expiration : null;
    }
    
    // Getters and setters for JTextArea fields
    public String getDelivery() {
        return txt_delivery.getText();
    }

    public void setDelivery(String value) {
        txt_delivery.setText(isNullOrEmpty(value) ? null : value);
    }
    
    // Getters and setters for JTextArea fields
    public String getComments() {
        return txt_Comments.getText();
    }

    public void setComments(String value) {
        txt_Comments.setText(isNullOrEmpty(value) ? null : value);
    }
    
    // Getters and setters for JTextArea fields
    public String getHCPId() {
        return txt_HCPId.getText();
    }

    public void setHCPId(String value) {
        txt_HCPId.setText(isNullOrEmpty(value) ? null : value);
    }
    
    // Getters and setters for JTextArea fields
    public String getVaccine() {
        return txt_Vaccine.getText();
    }

    public void setVaccine(String value) {
        txt_Vaccine.setText(isNullOrEmpty(value) ? null : value);
    }
    
    
    private void initializeTable() {
    // Call the PatientDBUtils method to get the ResultSet
    ResultSet rs = Immunizations_DBOperations.PatientDBUtils(patientID);

    if (rs != null) {
        // Table model to display data in JTable and make it read-only
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make all cells non-editable
            }
        };

        model.addColumn("Date");
        model.addColumn("Expiration Date");
        model.addColumn("Delivery");
        model.addColumn("Comments");
        model.addColumn("HCPId");
        model.addColumn("Immunization ID");
        model.addColumn("Vaccine");

        // Store data for comboboxes in a list or map for later use
        List<Object[]> rowDataList = new ArrayList<>();

        // Populate table with result set data
        try {
            while (rs.next()) {
                Object[] row = new Object[7];
                row[0] = rs.getTimestamp("Date");
                row[1] = rs.getTimestamp("Expiration Date");
                row[2] = rs.getString("Delivery");
                row[3] = rs.getString("Comments");
                row[4] = rs.getString("HCPId");
                row[5] = rs.getInt("ImmunizationsID");
                row[6] = rs.getString("Vaccine");

                model.addRow(row);
                rowDataList.add(row);
            }

            tabl_Immunizations.setModel(model);

            // Hide certain columns (0 to 4)
            for (int i = 0; i <= 4; i++) {
                tabl_Immunizations.getColumnModel().getColumn(i).setMaxWidth(0);
                tabl_Immunizations.getColumnModel().getColumn(i).setMinWidth(0);
                tabl_Immunizations.getColumnModel().getColumn(i).setPreferredWidth(0);
            }

            // Add ListSelectionListener
            tabl_Immunizations.getSelectionModel().addListSelectionListener(e -> {
                if (!e.getValueIsAdjusting()) {
                    int selectedRow = tabl_Immunizations.getSelectedRow();
                    if (selectedRow != -1 && selectedRow < rowDataList.size()) {
                        Object[] selectedRowData = rowDataList.get(selectedRow);
                        Timestamp timestamp = (Timestamp) selectedRowData[0];
                        Timestamp expireTimestamp = (Timestamp) selectedRowData[1];

                        java.util.Date date = new java.util.Date(timestamp.getTime());
                        java.util.Date expireDate = new java.util.Date(expireTimestamp.getTime());

                        String delivery = (String) selectedRowData[2];
                        String comments = (String) selectedRowData[3];
                        String hcpid = (String) selectedRowData[4];
                        RecordID = (int) selectedRowData[5];
                        String vaccine = (String) selectedRowData[6];

                        setRecordID(RecordID);
                        setPatientID(patientID);
                        date_Immu_Date.setDate(date);
                        date_expiration.setDate(expireDate);
                        txt_Vaccine.setText(vaccine);
                        txt_delivery.setText(delivery);
                        txt_Comments.setText(comments);
                        txt_HCPId.setText(hcpid);
                    }
                }
            });

        } catch (SQLException e) {
            System.out.println(e);
            JOptionPane.showMessageDialog(this, "Error processing data: " + e.getMessage());
        }
    } else {
        JOptionPane.showMessageDialog(this, "Error retrieving data from database.");
    }
}

    
    
    private void ClearMode() {
        // Clear text fields
        txt_Comments.setText("");
        txt_HCPId.setText("");
        txt_Vaccine.setText("");
        txt_delivery.setText("");

        // Clear date fields
        date_Immu_Date.setDate(null);
        date_expiration.setDate(null);

        // Make fields editable
        txt_Comments.setEditable(true);
        txt_HCPId.setEditable(true);
        txt_Vaccine.setEditable(true);
        txt_delivery.setEditable(true);

        // Set background to white for editable mode
        txt_Comments.setBackground(Color.WHITE);
        txt_HCPId.setBackground(Color.WHITE);
        txt_Vaccine.setBackground(Color.WHITE);
        txt_delivery.setBackground(Color.WHITE);
        
        date_Immu_Date.setEnabled(true);
        date_expiration.setEnabled(true);
        date_Immu_Date.setBackground(Color.WHITE);
        date_expiration.setBackground(Color.WHITE);
        
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButtonMenuItem GMHNavBtn;
    private javax.swing.JRadioButtonMenuItem SoBNavBtn;
    private javax.swing.JRadioButtonMenuItem activityToleranceNavBtn;
    private com.toedter.calendar.JDateChooser date_Immu_Date;
    private com.toedter.calendar.JDateChooser date_expiration;
    private javax.swing.JMenuItem familyHistoryNavBTN;
    private javax.swing.JMenuItem immunizationsNavBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JRadioButtonMenuItem jRadioButton_Save;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JRadioButtonMenuItem menu_Add;
    private javax.swing.JMenu menu_Edit;
    private javax.swing.JMenu menu_Patient_Selection;
    private javax.swing.JRadioButtonMenuItem menu_delete;
    private javax.swing.JRadioButtonMenuItem patientDemoNavBtn;
    private javax.swing.JRadioButtonMenuItem radio_Patient_Selection;
    private javax.swing.JRadioButtonMenuItem radio_buttion_edit;
    private javax.swing.JTable tabl_Immunizations;
    private javax.swing.JTextField txt_Comments;
    private javax.swing.JTextField txt_HCPId;
    private javax.swing.JTextField txt_Vaccine;
    private javax.swing.JTextField txt_delivery;
    // End of variables declaration//GEN-END:variables
}
